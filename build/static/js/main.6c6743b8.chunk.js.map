{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","mintCount","setMintCount","loading","setLoading","isNetworkOk","setIsNetworkOk","setupEventListener","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","console","log","toNumber","alert","error","checkIfWalletIsConnected","request","method","accounts","length","account","chainId","connectWallet","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","getMintCount","TotalMintCount","number","className","onClick","disabled","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c6743b8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import \"./styles/App.css\";\n// フロントエンドとコントラクトを連携するライブラリをインポートします。\nimport { ethers } from \"ethers\";\n// useEffect と useState 関数を React.js からインポートしています。\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\nimport { queryAllByAttribute } from \"@testing-library/react\";\n\nconst TWITTER_HANDLE = \"4k7hB\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 3;\n// コトントラクトアドレスをCONTRACT_ADDRESS変数に格納\nconst CONTRACT_ADDRESS = \"0x565A032e9B49Af6F71c3fa04C06896e7835BA511\";\n\nconst App = () => {\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  // ミント回数を格納するための状態変数を定義します。\n  const [mintCount, setMintCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [isNetworkOk, setIsNetworkOk] =useState(false);\n\n\n  // setupEventListener 関数を定義します。\n  // MyEpicNFT.sol の中で event が　emit された時に、\n  // 情報を受け取ります。\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        // Event が　emit される際に、コントラクトから送信される情報を受け取っています。\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `あなたのウォレットに NFT を送信しました。OpenSea に表示されるまで最大で10分かかることがあります。NFT へのリンクはこちらです: https://testnets.opensea.io/assets/goerli/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ユーザーが認証可能なウォレットアドレスを持っているか確認します。\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // ユーザーが認証可能なウォレットアドレスを持っている場合は、ユーザーに対してウォレットへのアクセス許可を求める。許可されれば、ユーザーの最初のウォレットアドレスを accounts に格納する。\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n\n\n\n\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n            // App.js\n            let chainId = await ethereum.request({ method: \"eth_chainId\" });\n            console.log(\"Connected to chain \" + chainId);\n            // 0x5 は　Goerli の ID です。\n            const goerliChainId = \"0x5\";\n            if (chainId !== goerliChainId) {\n              setIsNetworkOk(false)\n              alert(\"You are not connected to the Goerli Test Network!\");\n            }\n            if (chainId === goerliChainId){\n              setIsNetworkOk(true)\n            }\n\n\n\n      // イベントリスナーを設定\n      // この時点で、ユーザーはウォレット接続が済んでいます。\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  // connectWallet メソッドを実装します。\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n\n      // ウォレットアドレスに対してアクセスをリクエストしています。\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      // if(!isNetworkOk){\n      //   alert(\"Please change the Network to Goerli!.\")\n      //   return;\n      // }\n\n      console.log(\"Connected\", accounts[0]);\n\n      // ウォレットアドレスを currentAccount に紐付けます。\n      setCurrentAccount(accounts[0]);\n\n      // イベントリスナーを設定\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // NFT を Mint する関数を定義しています。\n  const askContractToMintNft = async () => {\n    try {\n      setLoading(true);\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(\n          `Mined, see transaction: https://goerli.etherscan.io/tx/${nftTxn.hash}`\n        );\n        setLoading(false);\n      } else {\n        setLoading(false);\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      setLoading(false);\n      console.log(error);\n    }\n  };\n\n  // ページがロードされた際に下記が実行されます。\n  useEffect(() => {\n    setLoading(true);\n    checkIfWalletIsConnected();\n    getMintCount();\n    setLoading(false);\n  }, []);\n\n  // renderNotConnectedContainer メソッド（ Connect to Wallet を表示する関数）を定義します。\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // Mint NFT ボタンをレンダリングするメソッドを定義します。\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMintNft}\n      className=\"cta-button connect-wallet-button disabled:bg-gray-500\"\n      disabled={!isNetworkOk}\n    >\n      Mint NFT\n    </button>\n  );\n\n  // Mintの数を取得します。\n  const getMintCount = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n        let number = await connectedContract.TotalMintCount();\n        if (!number) return;\n        setMintCount(number.toNumber() - 1);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  \n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">あなただけの特別な NFT を Mint しよう💫</p>\n          {/*条件付きレンダリング。\n          // すでにウォレット接続されている場合は、\n          // Mint NFT を表示する。*/}\n          {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUI()}\n\n          {!isNetworkOk ? (\n            <p className=\"sub-text animate-pulse  text-orange-500\">\n              You are not in Goerli Network...\n            </p>\n          ) : (\n            <p className=\"sub-text text-green-500\">\n              You are in Goerli Network!\n            </p>\n          )}\n\n          {loading ? (\n            <p className=\"sub-text animate-pulse  text-orange-500\">\n              Loading...\n            </p>\n          ) : (\n            <p className=\"sub-text text-green-500\">\n              これまでに作成されたNFTの数 {mintCount}/{TOTAL_MINT_COUNT} NFT\n            </p>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}